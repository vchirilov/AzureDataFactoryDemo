{
	"name": "CopyPulseContacts",
	"properties": {
		"folder": {
			"name": "PulseContactsToIseries"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AdventureWorks2022_Dataset",
						"type": "DatasetReference"
					},
					"name": "PulseContactsSqlDataSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "PulseContacts_Dataset",
						"type": "DatasetReference"
					},
					"name": "PulseContacts",
					"description": "PulseContacts.csv file"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          BusinessEntityID as integer,",
				"          NationalIDNumber as string,",
				"          LoginID as string,",
				"          OrganizationNode as binary,",
				"          OrganizationLevel as integer,",
				"          JobTitle as string,",
				"          BirthDate as date,",
				"          MaritalStatus as string,",
				"          Gender as string,",
				"          HireDate as date,",
				"          SalariedFlag as boolean,",
				"          VacationHours as integer,",
				"          SickLeaveHours as integer,",
				"          CurrentFlag as boolean,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT TOP (100) \\n     [AddressID]\\n      ,[AddressLine1]\\n      ,[City]\\n      ,[ModifiedDate]\\n  FROM [AdventureWorks2022].[Person].[Address]\\n  ',",
				"     format: 'query') ~> PulseContactsSqlDataSource",
				"PulseContactsSqlDataSource sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          AddressID as string,",
				"          { AddressLine1} as string,",
				"          { City} as string,",
				"          { ModifiedDate} as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PulseContacts"
			]
		}
	}
}